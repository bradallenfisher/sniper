<?php
/**
 * @file
 * Tests for the Metatag module.
 */

class MetatagUnitTest extends MetatagTestHelper {
  public static function getInfo() {
    return array(
      'name' => 'Metatag unit tests',
      'description' => 'Test basic meta tag functionality for entities.',
      'group' => 'Metatag',
    );
  }

  /**
   * Test the metatag_config_load_with_defaults() function.
   */
  public function testConfigLoadDefaults() {
    $defaults = metatag_config_load_with_defaults('test:foo');
    $this->assertEqual($defaults, array(
      // Fake meta tag.
      'test:foo' => array('value' => 'foobar'),

      // Basic meta tags.
      'title' => array('value' => 'Test altered title'),
      'description' => array('value' => 'Test foo description'),
      'abstract' => array('value' => 'Test foo abstract'),
      // 'keywords' => array('value' => ''),

      // Advanced meta tags.
      // 'robots' => array('value' => ''),
      // 'news_keywords' => array('value' => ''),
      // 'standout' => array('value' => ''),
      // 'robots' => array('value' => ''),
      // 'standout' => array('value' => ''),
      'generator' => array('value' => 'Drupal 7 (http://drupal.org)'),
      // 'standout' => array('value' => ''),
      // 'image_src' => array('value' => ''),
      'canonical' => array('value' => '[current-page:url:absolute]'),
      'shortlink' => array('value' => '[current-page:url:unaliased]'),
      // 'publisher' => array('value' => ''),
      // 'author' => array('value' => ''),
      // 'original-source' => array('value' => ''),
      // 'revisit-after' => array('value' => ''),
      // 'content-language' => array('value' => ''),'

      // Dublin Core meta tags.
      'dcterms.format' => array('value' => 'text/html'),
      'dcterms.identifier' => array('value' => '[current-page:url:absolute]'),
      'dcterms.title' => array('value' => '[current-page:title]'),
      'dcterms.type' => array('value' => 'Text'),

      // Google+ meta tags.
      'itemprop:name' => array('value' => '[current-page:title]'),

      // Open Graph meta tags.
      'og:site_name' => array('value' => '[site:name]'),
      'og:title' => array('value' => '[current-page:title]'),
      'og:type' => array('value' => 'article'),
      'og:url' => array('value' => '[current-page:url:absolute]'),

      // Twitter Cards meta tags.
      'twitter:card' => array('value' => 'summary'),
      'twitter:title' => array('value' => '[current-page:title]'),
      'twitter:url' => array('value' => '[current-page:url:absolute]'),
    ));
  }

  public function testEntitySupport() {
    $test_cases[1] = array('type' => 'node', 'bundle' => 'article', 'expected' => TRUE);
    $test_cases[2] = array('type' => 'node', 'bundle' => 'page', 'expected' => TRUE);
    $test_cases[3] = array('type' => 'node', 'bundle' => 'invalid-bundle', 'expected' => FALSE);
    $test_cases[4] = array('type' => 'user', 'expected' => TRUE);
    $test_cases[5] = array('type' => 'taxonomy_term', 'bundle' => 'tags', 'expected' => TRUE);
    $test_cases[6] = array('type' => 'taxonomy_term', 'bundle' => 'invalid-bundle', 'expected' => FALSE);
    foreach ($test_cases as $test_case) {
      $test_case += array('bundle' => NULL);
      $this->assertMetatagEntitySupportsMetatags($test_case['type'], $test_case['bundle'], $test_case['expected']);
    }

    // Enable meta tags for this new content type.
    metatag_entity_type_disable('node', 'page');
    metatag_entity_type_disable('user');

    $test_cases[2]['expected'] = FALSE;
    $test_cases[4]['expected'] = FALSE;
    $test_cases[6]['expected'] = FALSE;
    foreach ($test_cases as $test_case) {
      $test_case += array('bundle' => NULL);
      $this->assertMetatagEntitySupportsMetatags($test_case['type'], $test_case['bundle'], $test_case['expected']);
    }
  }

  function assertMetatagEntitySupportsMetatags($entity_type, $bundle, $expected) {
    $entity = entity_create_stub_entity($entity_type, array(0, NULL, $bundle));
    return $this->assertEqual(
      metatag_entity_supports_metatags($entity_type, $bundle),
      $expected,
      t("metatag_entity_supports_metatags(:type, :bundle) is :expected", array(
        ':type' => var_export($entity_type, TRUE),
        ':bundle' => var_export($bundle, TRUE),
        ':expected' => var_export($expected, TRUE),
      ))
    );
  }

  /**
   * Test the metatag_config_instance_label() function.
   */
  public function testConfigLabels() {
    $test_cases = array(
      'node' => 'Node',
      'node:article' => 'Node: Article',
      'node:article:c' => 'Node: Article: Unknown (c)',
      'node:b' => 'Node: Unknown (b)',
      'node:b:c' => 'Node: Unknown (b): Unknown (c)',
      'a' => 'Unknown (a)',
      'a:b' => 'Unknown (a): Unknown (b)',
      'a:b:c' => 'Unknown (a): Unknown (b): Unknown (c)',
      'a:b:c:d' => 'Unknown (a): Unknown (b): Unknown (c): Unknown (d)',
    );

    foreach ($test_cases as $input => $expected_output) {
      drupal_static_reset('metatag_config_instance_label');
      $actual_output = metatag_config_instance_label($input);
      $this->assertEqual($actual_output, $expected_output);
    }
  }

  /**
   * Test the _metatag_config_instance_sort() function.
   */
  public function testConfigInstanceSort() {
    $input = array(
      'node:article',
      'global:frontpage',
      'file',
      'node:page',
      'global',
      'node',
      'global:404',
    );
    usort($input, '_metatag_config_instance_sort');
    $this->assertIdentical($input, array(
      'global',
      'global:404',
      'global:frontpage',
      'file',
      'node',
      'node:article',
      'node:page',
    ));
  }

}
